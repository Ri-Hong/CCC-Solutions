n = int(input())
for i in range(n):
  r = int(input())
  c = int(input())
  pr = r - int(input())
  pc = int(input()) - 1
  kr = r - int(input())
  kc = int(input()) - 1
  win = False
  stale = 10000
  board = [[10000 for x in range(c)] for x in range(r)]
  board[kr][kc] = 0
  queue = [[kr,kc]]

  while queue:
    y,x = queue.pop(0)
    valueOfCurrSquare = board[y][x]
    if y > 0 and x > 1:
      if board[y-1][x-2] > valueOfCurrSquare + 1:
        board[y-1][x-2] = valueOfCurrSquare + 1
        queue.append([y-1,x-2])
    if y > 1 and x > 0:
      if board[y-2][x-1] > valueOfCurrSquare + 1:
        board[y-2][x-1] = valueOfCurrSquare + 1
        queue.append([y-2,x-1])
    if y > 0 and x < c-2:
      if board[y-1][x+2] > valueOfCurrSquare + 1:
        board[y-1][x+2] = valueOfCurrSquare + 1
        queue.append([y-1,x+2])
    if y > 1 and x < c-1:
      if board[y-2][x+1] > valueOfCurrSquare + 1:
        board[y-2][x+1] = valueOfCurrSquare + 1
        queue.append([y-2,x+1])
    if y < r-1 and x > 1:
      if board[y+1][x-2] > valueOfCurrSquare + 1:
        board[y+1][x-2] = valueOfCurrSquare + 1
        queue.append([y+1,x-2])
    if y < r-2 and x > 0:
      if board[y+2][x-1] > valueOfCurrSquare + 1:
        board[y+2][x-1] = valueOfCurrSquare + 1
        queue.append([y+1,x-1])
    if y < r-1 and x < c-2:
      if board[y+1][x+2] > valueOfCurrSquare + 1:
        board[y+1][x+2] = valueOfCurrSquare + 1
        queue.append([y+1,x+2])
    if y < r-2 and x < c-1:
      if board[y+2][x+1] > valueOfCurrSquare + 1:
        board[y+2][x+1] = valueOfCurrSquare + 1
        queue.append([y+2,x+1])

  pawnMoveCounter = 0
  for j in range(pr, 0, -1):
    if board[j][pc] == pawnMoveCounter:
      win = pawnMoveCounter
      break
    elif board[j-1][pc] == pawnMoveCounter:
      if pawnMoveCounter < stale:
        stale = pawnMoveCounter
    #check cyccles
    elif pawnMoveCounter > 1:
      if board[j][pc] < pawnMoveCounter:
        if board[j][pc] % 2 == pawnMoveCounter % 2:
          win = pawnMoveCounter
          break
        elif board[j-1][pc] % 2 == pawnMoveCounter % 2:
          if pawnMoveCounter < stale:
            stale = pawnMoveCounter

    pawnMoveCounter += 1

  if win:
    print ("Win in",win,"knight move(s).")
  elif stale != 10000:
    print ("Stalemate in",stale,"knight move(s).")
  else:
    print ("Loss in",r - (r - pr) - 1,"knight move(s).")
