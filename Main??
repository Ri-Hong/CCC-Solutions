#include <iostream>
#include <vector>
#include <array>


bool contains(std::vector<std::string> containerList, std::string lookingFor){
  for(std::string currString : containerList){
    if(currString == lookingFor){
      return true;
    }
  }
  return false;
}


std::string needle;
std::string haystack;

int nDistinctPerms = 0;
std::array<int, 26> needleNumChars;
std::array<int, 26> windowNumChars;

std::vector<std::string> alreadyCounted;
int needleHashTotal = 0;
bool numLetterMatch;


int main() {
  std::cin >> needle;
  std::cin >> haystack;

  if(needle.size() > haystack.size()){
    std::cout << 0;
    return 0;
  }

  for(int i : needle){
    needleHashTotal += i;
    needleNumChars[i - 97]++;
  }

  int currWindowHashTotal = 0;
  for(int i = 0; i < needle.length(); i++){
    currWindowHashTotal += haystack[i];
  }

  for(int i = 0; i < needle.length(); i++){
    windowNumChars[haystack[i] - 97]++;
  }

  std::string currWindow = haystack.substr(0, needle.size());

  for(int i = 0; i < haystack.size() - needle.size() + 1; i++){
    // std::cout << currWindow << std::endl;

    if(needleHashTotal == currWindowHashTotal){
      //check if letters are matching
      numLetterMatch = true;

      for(int j = 0; j < 26; j++){
        if(needleNumChars[j] != windowNumChars[j]){
          numLetterMatch = false;
          break;
        }
      }

      if(numLetterMatch){
        if(! contains(alreadyCounted, std::string(currWindow))){ //if not found:
          nDistinctPerms++;
          alreadyCounted.push_back(currWindow);
        }
      }
    }

    if(i != haystack.size() - needle.size()){
      currWindowHashTotal -= haystack[i];
      currWindowHashTotal += haystack[i + needle.size()];
      windowNumChars[haystack[i] - 97]--;
      windowNumChars[haystack[i + needle.size()] - 97]++;
      currWindow.erase(0, 1);
      currWindow += haystack[i + needle.size()];
    }

  }


  std::cout << nDistinctPerms;  
}
