#include <iostream>
#include <vector>
#include <map>
using namespace std;

int total = 0;
vector<string> connections;
vector<string> tempConnections;
map <char, vector<char>> tempTree;
map <char, bool> visited;
map <char, bool> tempVisited;
vector<char> startingNode;
vector<char> startNode {'A'};

void getInput(){
  string input;
  cin >> input;
  while(input != "**"){
    connections.push_back(input);
    cin >> input;
  }
}

map <char, vector<char>> constructTree(vector<string> connections){
  vector<char> connectingNodes;
  map <char, vector<char>> tree;

  for (string i : connections){
    if(tree.find(i[0]) == tree.end()){
      startingNode.push_back(i[0]);
      for (string j : connections){
        if (j[0] == i[0]){
          connectingNodes.push_back(j[1]);
        }else if(j[1] == i[0]){
          connectingNodes.push_back(j[0]);
        }
      }
      tree.insert({i[0], connectingNodes});
      connectingNodes.clear();
    }
    if(tree.find(i[1]) == tree.end()){
      startingNode.push_back(i[1]);
      for (string j : connections){
        if (j[0] == i[1]){
          connectingNodes.push_back(j[1]);
        }else if(j[1] == i[1]){
          connectingNodes.push_back(j[0]);
        }
      }
      tree.insert({i[1], connectingNodes});
      connectingNodes.clear();
    }
  }
  return tree;
}

bool isStillConnected(vector<char> currNodes, map <char, vector<char>> tree, map<char, bool> visited){
  vector<char> nextNodes {};
  if (currNodes.size() == 0){
    return false;
  }

  for (char i : currNodes){
    if (i == 'B'){
      return true;
    }

    if (visited[i] == 1){
      continue;
    }
    else{
      nextNodes.insert(nextNodes.end(), tree[i].begin(), tree[i].end());
      //change node to visited
      visited[i] = true;
    }
  }

  return isStillConnected(nextNodes, tree, visited);
}


int main() {
  getInput();
  for (string i : connections){
    for (int j = 0; j < 2; j++){
      if (visited.find(i[j]) == visited.end()){
        visited.insert({i[j], false});
      }
    }
  }
  
// for (int i = 0; i < tree.size(); i++){
//   cout << startingNode[i] << " ";
// }
// cout << "\n";
// for(auto it = tree.begin(); it != tree.end(); it++){
//    cout << it->first << ":";
//    for(auto it2 = it->second.begin(); it2 != it->second.end(); it2++){
//      cout << *it2 << ",";
//    }
//    cout << endl;
// }

  for (int i = 0; i < connections.size(); i++){
    tempConnections = connections;
    tempConnections.erase(tempConnections.begin() + i);
    tempTree = constructTree(tempConnections);
    tempVisited = visited;

    if(isStillConnected(startNode, tempTree, tempVisited) == false){
      cout << connections[i] << endl;
      total++;
    }
  }
  cout << "There are " << total << " disconnecting roads." << endl;
} //end Main
