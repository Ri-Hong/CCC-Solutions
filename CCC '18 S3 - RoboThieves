import copy
import sys
sys.setrecursionlimit(2500)

factoryPlan = []
def getInput(fileOrInput):
  global factoryPlan

  if fileOrInput == "Input":
    rowsAndCols = input()
    numRows, numCols = rowsAndCols.split()
    numRows = int(numRows)
    numCols = int(numCols)


    for r in range(numRows):
      rowList = []
      row = input()
      for c in row:
        rowList.append(c)
      factoryPlan.append(rowList)

  if fileOrInput == "File":
    f = open("input.txt", "r")
    rowsAndCols = f.readline()
    numRows, numCols = rowsAndCols.split()
    numRows = int(numRows)
    numCols = int(numCols)

    for r in range(numRows):
      rowList = []
      row = f.readline()
      for c in row:
        if c != '\n':
          rowList.append(c)
      factoryPlan.append(rowList)

def printPlan(plan):
  for row in plan:
    for col in row:
      print("%2s"%(col), end = "")
    print("")
  print("")

def findShortestPath(distance, plan, currNodeList, counterPlan):
  nextNodeList = []
  while len(currNodeList) != 0:
    for row, col in currNodeList:
      # print(plan[row][col])
      if plan[row][col] == "W":
        pass
      else:
        if int(counterPlan[row][col]) > 10000:
          currNodeList.remove([row, col])
          continue

      if str(plan[row][col]) in "UDLR":
        counterPlan[row][col] += 1
        if plan[row][col] == "U":
          currNodeList.append([row-1, col])
        elif plan[row][col] == "D":
          currNodeList.append([row+1, col])
        elif plan[row][col] == "L":
          currNodeList.append([row, col-1])
        elif plan[row][col] == "R":
          currNodeList.append([row, col+1])

      elif plan[row][col] == ".":
        counterPlan[row][col] += 1
        plan[row][col] = distance
        if str(plan[row+1][col]) in "UDLR" or plan[row+1][col] == ".":
          nextNodeList.append([row+1, col])
        if str(plan[row-1][col]) in "UDLR" or plan[row-1][col] == ".":
          nextNodeList.append([row-1, col])    
        if str(plan[row][col+1]) in "UDLR" or plan[row][col+1] == ".":
          nextNodeList.append([row, col+1])
        if str(plan[row][col-1]) in "UDLR" or plan[row][col-1] == ".":
          nextNodeList.append([row, col-1])

      currNodeList.remove([row, col])

  if len(nextNodeList) != 0:
    findShortestPath(distance+1, plan, nextNodeList, counterPlan)

def dealWithCamerasAndReturnStart(factoryPlan):
  voidAll = False
  ###find S
  for row in range(len(factoryPlan)):
    for col in range(len(factoryPlan[row])):
      if factoryPlan[row][col] == "S":
        startRow = row
        startCol = col
      #change camera row and col into walls
      if factoryPlan[row][col] == "C":
        for r in range(row+1, len(factoryPlan)):
          if factoryPlan[r][col] == "S":
            voidAll = True
            break
          if factoryPlan[r][col] == "W":
            break
          if factoryPlan[r][col] == ".":
            factoryPlan[r][col] = -1
        for r in range(row-1, 0, -1):
          if factoryPlan[r][col] == "W":
            break
          if factoryPlan[r][col] == ".":
            factoryPlan[r][col] = -1
          if factoryPlan[r][col] == "S":
            voidAll = True
            break

        for c in range(col+1, len(factoryPlan[row])):
          if factoryPlan[row][c] == "S":
            voidAll = True
            break
          if factoryPlan[row][c] == "W":
            break
          if factoryPlan[row][c] == ".":
            factoryPlan[row][c] = -1
        for c in range(col-1, 0, -1):
          if factoryPlan[row][c] == "S":
            voidAll = True
            break
          if factoryPlan[row][c] == "W":
            break
          if factoryPlan[row][c] == ".":
            factoryPlan[row][c] = -1 

  return startRow, startCol, voidAll

###_____________________main____________
getInput("Input")
startRow, startCol, voidAll = dealWithCamerasAndReturnStart(factoryPlan)
counterPlan = copy.deepcopy(factoryPlan)

for row in range(len(factoryPlan)):
  for col in range(len(factoryPlan[row])):
    if counterPlan[row][col] != "W":
      counterPlan[row][col] = 0

if voidAll:
  for row in range(len(factoryPlan)):
    for col in range(len(factoryPlan[row])):
      if factoryPlan[row][col] == "." or factoryPlan[row][col] == -1:
        print("-1")
else:
  factoryPlan[startRow][startCol] = "."
  findShortestPath(0, factoryPlan, [[startRow, startCol]], counterPlan)

  for row in range(len(factoryPlan)):
    for col in range(len(factoryPlan[row])):
      value = str(factoryPlan[row][col])
      if str.isdigit(value):
        if value != "0":
          print(value)
      elif factoryPlan[row][col] == ".":
        print("-1")
      if value == "-1":
        print("-1")

# printPlan(factoryPlan)
# printPlan(counterPlan)
